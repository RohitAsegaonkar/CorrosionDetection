# -*- coding: utf-8 -*-
"""SDP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dkUVG1BBvdMinwBhKSah6jZeKp1O5PLt
"""
import cv2
import PIL
import matplotlib.pyplot as plt
import numpy as np
from PIL import Image

from mpl_toolkits.mplot3d import Axes3D
from matplotlib import cm
from matplotlib import colors

#src_path = "/content/drive/MyDrive/WhatsApp Image 2021-06-05 at 15.05.02 (1).jpeg"

img= cv2.imread('Images/testimg1.png')
im1=cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
plt.imshow(im1)

IMG = cv2.resize(im1, (256, 256), interpolation = cv2.INTER_NEAREST) 
plt.imshow(IMG)

r, g, b = cv2.split(IMG)
fig = plt.figure()
axis = fig.add_subplot(1, 1, 1, projection="3d")
pixel_colors = IMG.reshape((np.shape(IMG)[0]*np.shape(IMG)[1], 3))
norm = colors.Normalize(vmin=-1.,vmax=1.)
norm.autoscale(pixel_colors)
pixel_colors = norm(pixel_colors).tolist()
axis.scatter(r.flatten(), g.flatten(), b.flatten(), facecolors=pixel_colors, marker=".")
axis.set_xlabel("Red")
axis.set_ylabel("Green")
axis.set_zlabel("Blue")
plt.show()

from matplotlib import pyplot as plt
import cv2


cv2.cvtColor(IMG, cv2.COLOR_RGB2HSV)

H, S, V = IMG[:,:,0],IMG[:,:,1],IMG[:,:,2]

plt.figure(figsize=(10,8))
plt.subplot(311)                             #plot in the first cell
plt.subplots_adjust(hspace=.5)
plt.title("Hue")
plt.hist(np.ndarray.flatten(H), bins=180)
plt.subplot(312)                             #plot in the second cell
plt.title("Saturation")
plt.hist(np.ndarray.flatten(S), bins=128)
plt.subplot(313)                             #plot in the third cell
plt.title("Luminosity Value")
plt.hist(np.ndarray.flatten(V), bins=128)
plt.show()
V

#Org= cv2.imread('/content/drive/MyDrive/WhatsApp Image 2021-06-05 at 15.05.02 (1).jpeg')
Org= cv2.imread('testimg1.png')
org = cv2.cvtColor(Org, cv2.COLOR_BGR2RGB)
frame=cv2.cvtColor(Org, cv2.COLOR_BGR2HSV)
plt.imshow(org)

lower = np.array([251, 52, 52])
upper = np.array([102, 255, 265])

    
mask = cv2.inRange(frame, lower, upper)
plt.imshow(mask)

contours, hierarchy = cv2.findContours(mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
for pic, contour in enumerate(contours): 

        area = cv2.contourArea(contour) 
        k=1
        if(area > 15000): 

            x, y, w, h = cv2.boundingRect(contour) 

            org= cv2.rectangle(org, (x, y), (x + w, y + h), (255, 255, 255), 5) 

              

            cv2.putText(org, "unriped", (50, 60),cv2.FONT_HERSHEY_SIMPLEX, 3.0, (0, 1, 255),3)  
if(k>0):
  cv2.putText(org, "riped", (50, 60),cv2.FONT_HERSHEY_SIMPLEX, 2.0, (0, 0, 255),2)

plt.imshow(org)